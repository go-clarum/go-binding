// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.28.3
// source: application/api/cmd/cmd.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CmdApiClient is the client API for CmdApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CmdApiClient interface {
	InitEndpoint(ctx context.Context, in *InitEndpointRequest, opts ...grpc.CallOption) (*InitEndpointResponse, error)
	ShutdownEndpoint(ctx context.Context, in *ShutdownEndpointRequest, opts ...grpc.CallOption) (*ShutdownEndpointResponse, error)
}

type cmdApiClient struct {
	cc grpc.ClientConnInterface
}

func NewCmdApiClient(cc grpc.ClientConnInterface) CmdApiClient {
	return &cmdApiClient{cc}
}

func (c *cmdApiClient) InitEndpoint(ctx context.Context, in *InitEndpointRequest, opts ...grpc.CallOption) (*InitEndpointResponse, error) {
	out := new(InitEndpointResponse)
	err := c.cc.Invoke(ctx, "/CmdApi/InitEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmdApiClient) ShutdownEndpoint(ctx context.Context, in *ShutdownEndpointRequest, opts ...grpc.CallOption) (*ShutdownEndpointResponse, error) {
	out := new(ShutdownEndpointResponse)
	err := c.cc.Invoke(ctx, "/CmdApi/ShutdownEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CmdApiServer is the server API for CmdApi service.
// All implementations must embed UnimplementedCmdApiServer
// for forward compatibility
type CmdApiServer interface {
	InitEndpoint(context.Context, *InitEndpointRequest) (*InitEndpointResponse, error)
	ShutdownEndpoint(context.Context, *ShutdownEndpointRequest) (*ShutdownEndpointResponse, error)
	mustEmbedUnimplementedCmdApiServer()
}

// UnimplementedCmdApiServer must be embedded to have forward compatible implementations.
type UnimplementedCmdApiServer struct {
}

func (UnimplementedCmdApiServer) InitEndpoint(context.Context, *InitEndpointRequest) (*InitEndpointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitEndpoint not implemented")
}
func (UnimplementedCmdApiServer) ShutdownEndpoint(context.Context, *ShutdownEndpointRequest) (*ShutdownEndpointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShutdownEndpoint not implemented")
}
func (UnimplementedCmdApiServer) mustEmbedUnimplementedCmdApiServer() {}

// UnsafeCmdApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CmdApiServer will
// result in compilation errors.
type UnsafeCmdApiServer interface {
	mustEmbedUnimplementedCmdApiServer()
}

func RegisterCmdApiServer(s grpc.ServiceRegistrar, srv CmdApiServer) {
	s.RegisterService(&CmdApi_ServiceDesc, srv)
}

func _CmdApi_InitEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmdApiServer).InitEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CmdApi/InitEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmdApiServer).InitEndpoint(ctx, req.(*InitEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CmdApi_ShutdownEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShutdownEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmdApiServer).ShutdownEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CmdApi/ShutdownEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmdApiServer).ShutdownEndpoint(ctx, req.(*ShutdownEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CmdApi_ServiceDesc is the grpc.ServiceDesc for CmdApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CmdApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CmdApi",
	HandlerType: (*CmdApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InitEndpoint",
			Handler:    _CmdApi_InitEndpoint_Handler,
		},
		{
			MethodName: "ShutdownEndpoint",
			Handler:    _CmdApi_ShutdownEndpoint_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "application/api/cmd/cmd.proto",
}
