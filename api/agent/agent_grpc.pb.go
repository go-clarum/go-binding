// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.28.3
// source: application/api/agent/agent.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AgentApiClient is the client API for AgentApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AgentApiClient interface {
	Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	Logs(ctx context.Context, in *LogsRequest, opts ...grpc.CallOption) (AgentApi_LogsClient, error)
	Shutdown(ctx context.Context, in *ShutdownRequest, opts ...grpc.CallOption) (*ShutdownResponse, error)
}

type agentApiClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentApiClient(cc grpc.ClientConnInterface) AgentApiClient {
	return &agentApiClient{cc}
}

func (c *agentApiClient) Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/AgentApi/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentApiClient) Logs(ctx context.Context, in *LogsRequest, opts ...grpc.CallOption) (AgentApi_LogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &AgentApi_ServiceDesc.Streams[0], "/AgentApi/Logs", opts...)
	if err != nil {
		return nil, err
	}
	x := &agentApiLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AgentApi_LogsClient interface {
	Recv() (*LogEntry, error)
	grpc.ClientStream
}

type agentApiLogsClient struct {
	grpc.ClientStream
}

func (x *agentApiLogsClient) Recv() (*LogEntry, error) {
	m := new(LogEntry)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *agentApiClient) Shutdown(ctx context.Context, in *ShutdownRequest, opts ...grpc.CallOption) (*ShutdownResponse, error) {
	out := new(ShutdownResponse)
	err := c.cc.Invoke(ctx, "/AgentApi/Shutdown", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AgentApiServer is the server API for AgentApi service.
// All implementations must embed UnimplementedAgentApiServer
// for forward compatibility
type AgentApiServer interface {
	Status(context.Context, *StatusRequest) (*StatusResponse, error)
	Logs(*LogsRequest, AgentApi_LogsServer) error
	Shutdown(context.Context, *ShutdownRequest) (*ShutdownResponse, error)
	mustEmbedUnimplementedAgentApiServer()
}

// UnimplementedAgentApiServer must be embedded to have forward compatible implementations.
type UnimplementedAgentApiServer struct {
}

func (UnimplementedAgentApiServer) Status(context.Context, *StatusRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedAgentApiServer) Logs(*LogsRequest, AgentApi_LogsServer) error {
	return status.Errorf(codes.Unimplemented, "method Logs not implemented")
}
func (UnimplementedAgentApiServer) Shutdown(context.Context, *ShutdownRequest) (*ShutdownResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Shutdown not implemented")
}
func (UnimplementedAgentApiServer) mustEmbedUnimplementedAgentApiServer() {}

// UnsafeAgentApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgentApiServer will
// result in compilation errors.
type UnsafeAgentApiServer interface {
	mustEmbedUnimplementedAgentApiServer()
}

func RegisterAgentApiServer(s grpc.ServiceRegistrar, srv AgentApiServer) {
	s.RegisterService(&AgentApi_ServiceDesc, srv)
}

func _AgentApi_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentApiServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AgentApi/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentApiServer).Status(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentApi_Logs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LogsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AgentApiServer).Logs(m, &agentApiLogsServer{stream})
}

type AgentApi_LogsServer interface {
	Send(*LogEntry) error
	grpc.ServerStream
}

type agentApiLogsServer struct {
	grpc.ServerStream
}

func (x *agentApiLogsServer) Send(m *LogEntry) error {
	return x.ServerStream.SendMsg(m)
}

func _AgentApi_Shutdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShutdownRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentApiServer).Shutdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AgentApi/Shutdown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentApiServer).Shutdown(ctx, req.(*ShutdownRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AgentApi_ServiceDesc is the grpc.ServiceDesc for AgentApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AgentApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "AgentApi",
	HandlerType: (*AgentApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Status",
			Handler:    _AgentApi_Status_Handler,
		},
		{
			MethodName: "Shutdown",
			Handler:    _AgentApi_Shutdown_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Logs",
			Handler:       _AgentApi_Logs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "application/api/agent/agent.proto",
}
